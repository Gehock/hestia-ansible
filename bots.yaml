---
- name: Set up Discord bots
  hosts: bots
  vars:
    bots:
    - { name: missionbot,   description: Mission bot,   module: null, file: config.py }
    #- { name: operationbot, description: Operation bot, module: null, file: secret.py }
    #- { name: zeusopsbot,   description: Zeusops bot,   module: bot,  file: config_local.yaml }
    tokens:
      missionbot: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        63643663323136386139353239656366326536383962666237333438316665366333656162346533
        6161633839633132363363343230373237643130366438330a666264623339326537393064306334
        34376464643331633337363163313937356239366335623832616162366263373730633735393030
        3230343432653565640a363632626436633232313565376265663137356236633638366333333435
        65663032636436373165336134346166376530336333626536363262343430613162633233646263
        61373462346662666139623462383034343966356461373735366466303233393739616430643164
        623938633665366134373434633832386566

  #roles:
  #- role: systemd_service

  tasks:
  - name: Install virtualenv
    ansible.builtin.apt:
      name:
        - virtualenv
  - name: Create bot users
    ansible.builtin.user:
      name: "{{ item.name }}"
      system: yes
      home: "/srv/{{ item.name }}"
    loop: "{{ bots }}"
  - name: Clone bot repos
    become: yes
    become_user: "{{ item.name }}"
    ansible.builtin.git:
      repo: 'https://github.com/zeusops/{{ item.name }}.git'
      dest: "/srv/{{ item.name }}/{{ item.name }}"
    loop: "{{ bots }}"
    register: bot_services
    notify: Restart bot services
  - name: Install bot dependencies
    # TODO: make bots directly installable with pip
    become: yes
    become_user: "{{ item.name }}"
    ansible.builtin.pip:
      requirements: "/srv/{{ item.name }}/{{ item.name }}/requirements.txt"
      virtualenv: "/srv/{{ item.name }}/venv"
    loop: "{{ bots }}"
    register: bot_services
    notify: Restart bot services
  - name: Create bot configs
    # TODO: Reload bot automatically when config changes
    become: yes
    become_user: "{{ item.name }}"
    ansible.builtin.template:
      src: "files/bots/config/{{ item.name }}.{{ item.file }}"
      dest: "/srv/{{ item.name }}/{{ item.name }}/{{ item.file }}"
    loop: "{{ bots }}"
    register: bot_services
    notify: Restart bot services
  - name: Create bot systemd services
    ansible.builtin.template:
      src: files/bots/systemd.service.j2
      dest: /etc/systemd/system/{{ item.name }}.service
    vars:
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      module: "{{ item.module }}"
    loop: "{{ bots }}"
    notify:
    - Reload systemd
  - name: Run bots
    ansible.builtin.service:
      state: started
      enabled: yes
      name: "{{ item.name }}"
    loop: "{{ bots }}"

  - name: Install extractpbo dependencies
    ansible.builtin.apt:
      name:
      - liblzo2-2
      - libvorbis0a
      - libvorbisfile3
      - libvorbisenc2
      - libogg0
      - libuchardet0
      update_cache: true
  - name: Check if extractpbo exists
    ansible.builtin.stat:
      path: /usr/local/bin/extractpbo
    register: extractpbo
  - ansible.builtin.tempfile:
      state: file
      suffix: .tgz
    register: downloaded_file
    when: not extractpbo.stat.exists
  - name: Download depbotools
    ansible.builtin.get_url:
      url: "https://mikero.bytex.digital/api/download?filename=depbo-tools-0.8.91-linux-amd64.tgz"
      dest: "{{ downloaded_file.path }}"
      checksum: sha256:256698f38acf561e3ee3871542cd34740652275b681bfc13b8cd7e12112c858d
    when: downloaded_file is changed
  - name: Extract depbotools
    ansible.builtin.unarchive:
      src: "{{ downloaded_file.path }}"
      remote_src: yes
      dest: /usr/local
      extra_opts:
      - --strip-components=1
      - --exclude=readme-linux.txt
    when: downloaded_file is changed
  - ansible.builtin.file:
      state: absent
      path: "{{ downloaded_file.path }}"
    when: downloaded_file is changed
  - name: Add libdepbo to ldconfig
    ansible.builtin.copy:
      dest: /etc/ld.so.conf.d/libdepbo.conf
      content: /usr/local/lib
    when: downloaded_file is changed
    notify: Run ldconfig

  # TODO: Make this portable across hosts (mount?)
  - name: Create mission upload group
    ansible.builtin.group:
      name: mission_upload
  - name: Add missionbot to upload group
    ansible.builtin.user:
      name: missionbot
      groups: mission_upload
      append: yes


  handlers:
  - name: Reload systemd
    ansible.builtin.systemd:
      daemon_reload: yes
  - name: Run ldconfig
    ansible.builtin.command: ldconfig
  - name: Restart bot services
    # https://rolflekang.com/ansible-handlers-in-loops
    ansible.builtin.service:
      name: "{{ item }}"
      state: restarted
    loop: "{{ bot_services.results | selectattr('changed', 'equalto', true) | map(attribute='item') | map(attribute='name') | list }}"
